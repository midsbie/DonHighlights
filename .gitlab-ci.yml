# Gitlab CI configuration file
#
# Here's an excerpt taken from the old Circle CI configuration file responsible for publishing the
# package:
#
#       - run:
#           name: Authenticate to NPM
#           command: |
#             # See: http://blog.npmjs.org/post/118393368555/deploying-with-npm-private-modules
#             echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
#             # Verify that the authentication works
#             npm whoami
#
#       - deploy:
#           name: Publish to NPM on tag
#           command: |
#             # If we aren't on a tagged release, this deploymnt does not run.
#             if [ -z "$CIRCLE_TAG" ]; then
#               exit 0
#             fi
#
#             npm publish
# --

# Reference: https://hub.docker.com/_/node/
image: node:12.13.0

# Pick zero or more services to be used on all builds.
# Only needed when using a docker container to run your tests in.
# http://docs.gitlab.com/ce/ci/docker/using_docker_images.html#what-is-a-service
services:
  # No services are currently declared


# Cache is disabled because items are stored on a per-runner basis and thus not shared.  This means
# that it is not possible to share the output of a "bootstrap" job that installs node modules among
# concurrent running jobs in a given stage.
# http://docs.gitlab.com/ce/ci/yaml/README.html#cache
# cache:
#   key: "$CI_BUILD_REF_NAME"
#   untracked: true
#   paths:
#     - assets/icons/
#     - node_modules/

before_script:
  # Enable if debugging:
  # - export
  # - which node npm yarn

stages:
  - security
  - lint
  - build
  - test
  - deploy

# TODO: re-enable when appropriate
# NPM audit:
#   stage: security
#   script:
#     - yarn install
#     - yarn audit

flow:
  stage: lint
  script:
    - yarn install
    - yarn run check:flow

lint:
  stage: lint
  artifacts:
    reports:
      junit: test-results/junit/*.xml
  script:
    - yarn install
    - yarn run check:lint

prettier:
  stage: lint
  script:
    - yarn install
    - yarn run check:fmt

build:
  stage: build
  artifacts:
    expire_in: 1 week
    paths:
      - dist
      - es
      - lib
  script:
    - yarn install
    - yarn run build

# Note that *all* jobs involved in testing must produce artifacts containing
# log files generated by software used by the system.
unit:
  stage: test
  artifacts:
    reports:
      junit: junit.xml
  script:
    - yarn install
    - yarn run test
